using System;using Microsoft.EntityFrameworkCore;using Microsoft.EntityFrameworkCore.Metadata;namespace Asga.Auth{    public partial class AuthContext : DbContext    {        public AuthContext()        {        }        public AuthContext(DbContextOptions<AuthContext> options)            : base(options)        {        }        public virtual DbSet<DefaultRole> DefaultRoles { get; set; }        public virtual DbSet<Domain> Domains { get; set; }        public virtual DbSet<Resource> Resources { get; set; }        public virtual DbSet<ResourceAction> ResourceActions { get; set; }        public virtual DbSet<Role> Roles { get; set; }        public virtual DbSet<RoleResource> RoleResources { get; set; }        public virtual DbSet<RoleResourceAction> RoleResourceActions { get; set; }        public virtual DbSet<Tenant> Tenants { get; set; }        public virtual DbSet<TenantApp> TenantApps { get; set; }        public virtual DbSet<TenantAppUser> TenantAppUsers { get; set; }        public virtual DbSet<TenantDomain> TenantDomains { get; set; }        public virtual DbSet<User> Users { get; set; }        public virtual DbSet<UserParty> UserParties { get; set; }        public virtual DbSet<UserRole> UserRoles { get; set; }        protected override void OnModelCreating(ModelBuilder modelBuilder)        {            modelBuilder.Entity<DefaultRole>(entity =>            {                entity.Property(e => e.Id).ValueGeneratedNever();                entity.HasOne(d => d.Role)                    .WithMany(p => p.DefaultRoles)                    .HasForeignKey(d => d.RoleId)                    .HasConstraintName("FK__DefaultRo__RoleI__4984CAEC");            });            modelBuilder.Entity<Domain>(entity =>            {                entity.Property(e => e.Id).ValueGeneratedNever();                entity.Property(e => e.Name).IsUnicode(false);            });            modelBuilder.Entity<Resource>(entity =>            {                entity.Property(e => e.Id).ValueGeneratedNever();                entity.Property(e => e.Name).IsUnicode(false);                entity.HasOne(d => d.Domain)                    .WithMany(p => p.Resources)                    .HasForeignKey(d => d.DomainId)                    .OnDelete(DeleteBehavior.ClientSetNull)                    .HasConstraintName("FK_Resources_Domains");            });            modelBuilder.Entity<ResourceAction>(entity =>            {                entity.Property(e => e.Id).ValueGeneratedNever();                entity.Property(e => e.Name).IsUnicode(false);                entity.HasOne(d => d.Resource)                    .WithMany(p => p.ResourceActions)                    .HasForeignKey(d => d.ResourceId)                    .OnDelete(DeleteBehavior.ClientSetNull)                    .HasConstraintName("FK_ResourceActions_Resources");            });            modelBuilder.Entity<Role>(entity =>            {                entity.Property(e => e.Id).ValueGeneratedNever();                entity.HasOne(d => d.TenantApp)                    .WithMany(p => p.Roles)                    .HasForeignKey(d => d.TenantAppId)                    .HasConstraintName("FK__Roles__TenantApp__4890A6B3");            });            modelBuilder.Entity<RoleResource>(entity =>            {                entity.Property(e => e.Id).ValueGeneratedNever();                entity.HasOne(d => d.Resource)                    .WithMany(p => p.RoleResources)                    .HasForeignKey(d => d.ResourceId)                    .OnDelete(DeleteBehavior.ClientSetNull)                    .HasConstraintName("FK_RoleResources_Resources");                entity.HasOne(d => d.Role)                    .WithMany(p => p.RoleResources)                    .HasForeignKey(d => d.RoleId)                    .HasConstraintName("FK_RoleResources_Roles");            });            modelBuilder.Entity<RoleResourceAction>(entity =>            {                entity.Property(e => e.Id).ValueGeneratedNever();                entity.HasOne(d => d.ResourceAction)                    .WithMany(p => p.RoleResourceActions)                    .HasForeignKey(d => d.ResourceActionId)                    .OnDelete(DeleteBehavior.ClientSetNull)                    .HasConstraintName("FK_RoleResourceActions_ResourceActions");                entity.HasOne(d => d.Role)                    .WithMany(p => p.RoleResourceActions)                    .HasForeignKey(d => d.RoleId)                    .OnDelete(DeleteBehavior.ClientSetNull)                    .HasConstraintName("FK_RoleResourceActions_Roles");            });            modelBuilder.Entity<Tenant>(entity =>            {                entity.Property(e => e.Id).ValueGeneratedNever();                entity.Property(e => e.Code).IsUnicode(false);            });            modelBuilder.Entity<TenantApp>(entity =>            {                entity.Property(e => e.Id).ValueGeneratedNever();                entity.Property(e => e.Name).IsUnicode(false);            });            modelBuilder.Entity<TenantAppUser>(entity =>            {                entity.Property(e => e.Id).ValueGeneratedNever();                entity.HasOne(d => d.TenantApp)                    .WithMany(p => p.TenantAppUsers)                    .HasForeignKey(d => d.TenantAppId)                    .OnDelete(DeleteBehavior.ClientSetNull)                    .HasConstraintName("FK_TenantAppUsers_TenantApps");                entity.HasOne(d => d.User)                    .WithMany(p => p.TenantAppUsers)                    .HasForeignKey(d => d.UserId)                    .OnDelete(DeleteBehavior.ClientSetNull)                    .HasConstraintName("FK_TenantAppUsers_Users");            });            modelBuilder.Entity<TenantDomain>(entity =>            {                entity.Property(e => e.Id).ValueGeneratedNever();                entity.HasOne(d => d.Domain)                    .WithMany(p => p.TenantDomains)                    .HasForeignKey(d => d.DomainId)                    .OnDelete(DeleteBehavior.ClientSetNull)                    .HasConstraintName("FK_TenantDomains_Domains");                entity.HasOne(d => d.Tenant)                    .WithMany(p => p.TenantDomains)                    .HasForeignKey(d => d.TenantId)                    .OnDelete(DeleteBehavior.ClientSetNull)                    .HasConstraintName("FK_TenantDomains_Tenants");            });            modelBuilder.Entity<User>(entity =>            {                entity.Property(e => e.Id).ValueGeneratedNever();                entity.Property(e => e.Email).IsUnicode(false);                entity.Property(e => e.LogonName).IsUnicode(false);                entity.Property(e => e.Password).IsUnicode(false);                entity.HasOne(d => d.Tenant)                    .WithMany(p => p.Users)                    .HasForeignKey(d => d.TenantId)                    .HasConstraintName("FK_Users_Tenants");            });            modelBuilder.Entity<UserParty>(entity =>            {                entity.Property(e => e.Id).ValueGeneratedNever();                entity.HasOne(d => d.User)                    .WithMany(p => p.UserParties)                    .HasForeignKey(d => d.UserId)                    .HasConstraintName("FK_Users_UserParties");            });            modelBuilder.Entity<UserRole>(entity =>            {                entity.Property(e => e.Id).ValueGeneratedNever();                entity.HasOne(d => d.Role)                    .WithMany(p => p.UserRoles)                    .HasForeignKey(d => d.RoleId)                    .OnDelete(DeleteBehavior.ClientSetNull)                    .HasConstraintName("FK_UserRoles_Roles");                entity.HasOne(d => d.User)                    .WithMany(p => p.UserRoles)                    .HasForeignKey(d => d.UserId)                    .HasConstraintName("FK_UserRoles_Users");            });        }    }}