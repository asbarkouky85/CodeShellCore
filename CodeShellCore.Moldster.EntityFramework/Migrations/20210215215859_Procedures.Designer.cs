// <auto-generated />
using System;
using CodeShellCore.Moldster;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CodeShellCore.Moldster.Migrations
{
    [DbContext(typeof(MoldsterContext))]
    [Migration("20210215215859_Procedures")]
    partial class Procedures
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CodeShellCore.Moldster.App", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DashboardUrl")
                        .HasMaxLength(300);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<long>("TenantId");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Apps");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.Client", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Identifier")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Secret")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.Control", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("ControlType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DesignParameters")
                        .HasColumnType("ntext");

                    b.Property<string>("Identifier")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<long?>("PageCategoryId");

                    b.Property<long?>("ParentControl");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("PageCategoryId");

                    b.HasIndex("ParentControl");

                    b.ToTable("Controls");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.ControlValidator", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long>("ControlId");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("ValidatorId");

                    b.HasKey("Id");

                    b.HasIndex("ControlId");

                    b.HasIndex("ValidatorId");

                    b.ToTable("ControlValidators");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.CustomField", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<long>("PageId");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("CustomFields");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.CustomText", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Locale")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<long>("TenantId");

                    b.Property<int>("Type");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Value")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("CustomTexts");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.Domain", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("Chain")
                        .IsUnicode(false);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NameChain");

                    b.Property<long?>("ParentId");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Domains");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.NavigationGroup", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("Chain");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(150);

                    b.Property<long?>("ParentId");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("NavigationGroups");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.NavigationPage", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("DisplayOrder");

                    b.Property<long>("NavigationGroupId");

                    b.Property<long?>("PageId");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("NavigationGroupId");

                    b.HasIndex("PageId");

                    b.ToTable("NavigationPages");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.Page", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("Apps")
                        .IsUnicode(false);

                    b.Property<bool>("CanEmbed");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("DefaultAccessibility");

                    b.Property<long>("DomainId");

                    b.Property<bool>("HasRoute");

                    b.Property<bool?>("IsHomePage");

                    b.Property<string>("Layout")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long?>("PageCategoryId");

                    b.Property<long?>("ParentId");

                    b.Property<string>("PrivilegeType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long?>("ResourceActionId");

                    b.Property<long?>("ResourceId");

                    b.Property<string>("RouteParameters")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<long?>("SourceCollectionId");

                    b.Property<string>("SpecialPermission")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long>("TenantId");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("ViewParams")
                        .HasColumnType("ntext");

                    b.Property<string>("ViewPath")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.HasIndex("PageCategoryId");

                    b.HasIndex("ResourceActionId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("SourceCollectionId");

                    b.HasIndex("TenantId");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.PageCategory", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("BaseComponent")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<long?>("DomainId");

                    b.Property<string>("Layout")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long?>("ResourceId");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("ViewPath")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.HasIndex("ResourceId");

                    b.ToTable("PageCategories");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.PageCategoryParameter", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DefaultValue")
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long>("PageCategoryId");

                    b.Property<int>("Type");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("PageCategoryId");

                    b.ToTable("PageCategoryParameters");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.PageControl", b =>
                {
                    b.Property<long>("Id");

                    b.Property<byte>("Accessability");

                    b.Property<long>("ControlId");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("PageId");

                    b.Property<bool?>("Persistent");

                    b.Property<long?>("SourceCollectionId");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ControlId");

                    b.HasIndex("PageId");

                    b.HasIndex("SourceCollectionId");

                    b.ToTable("PageControls");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.PageControlValidator", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("PageControlId");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("ValidatorId");

                    b.HasKey("Id");

                    b.HasIndex("PageControlId");

                    b.HasIndex("ValidatorId");

                    b.ToTable("PageControlValidators");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.PageParameter", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<long?>("LinkedPageId");

                    b.Property<long>("PageCategoryParameterId");

                    b.Property<long>("PageId");

                    b.Property<string>("ParameterValue");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("UseDefault");

                    b.HasKey("Id");

                    b.HasIndex("PageCategoryParameterId");

                    b.HasIndex("PageId");

                    b.ToTable("PageParameters");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.PageRoute", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long?>("AddUrl");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<long?>("DetailsUrl");

                    b.Property<long?>("EditUrl");

                    b.Property<long?>("ListUrl");

                    b.Property<long>("PageId");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("PageRoutes");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.Resource", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<long?>("DomainId");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("ServiceName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.ResourceAction", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<long>("ResourceId");

                    b.Property<long>("TenantId");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.HasIndex("TenantId");

                    b.ToTable("ResourceActions");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.ResourceCollection", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long?>("ResourceId");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.ToTable("ResourceCollections");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.ResourceCollectionCondition", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<long?>("DomainEntityCollectionId");

                    b.Property<string>("Property")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Value")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.HasIndex("DomainEntityCollectionId");

                    b.ToTable("ResourceCollectionConditions");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.Tenant", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("BaseStyle")
                        .HasMaxLength(100);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ConnectionString")
                        .HasColumnType("text");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Logo")
                        .HasMaxLength(300);

                    b.Property<string>("MainComponentBase")
                        .HasMaxLength(300);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long?>("ParentId");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Version")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.Validator", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("CalendarType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("MaxLength");

                    b.Property<string>("MaxValue")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("MinLength");

                    b.Property<string>("MinValue")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Pattern")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Validators");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.App", b =>
                {
                    b.HasOne("CodeShellCore.Moldster.Tenant", "Tenant")
                        .WithMany("Apps")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("FK_TenantApps_Tenants")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CodeShellCore.Moldster.Control", b =>
                {
                    b.HasOne("CodeShellCore.Moldster.PageCategory", "PageCategory")
                        .WithMany("Controls")
                        .HasForeignKey("PageCategoryId")
                        .HasConstraintName("FK_Controls_PageCategories")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CodeShellCore.Moldster.Control", "ParentControlNavigation")
                        .WithMany("InverseParentControlNavigation")
                        .HasForeignKey("ParentControl")
                        .HasConstraintName("FK_PageControls_PageControls");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.ControlValidator", b =>
                {
                    b.HasOne("CodeShellCore.Moldster.Control", "Control")
                        .WithMany("ControlValidators")
                        .HasForeignKey("ControlId")
                        .HasConstraintName("FK_ControlValidators_Controls");

                    b.HasOne("CodeShellCore.Moldster.Validator", "Validator")
                        .WithMany("ControlValidators")
                        .HasForeignKey("ValidatorId")
                        .HasConstraintName("FK_ControlValidators_Validators");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.CustomField", b =>
                {
                    b.HasOne("CodeShellCore.Moldster.Page", "Page")
                        .WithMany("CustomFields")
                        .HasForeignKey("PageId")
                        .HasConstraintName("FK_CustomFields_Pages")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CodeShellCore.Moldster.CustomText", b =>
                {
                    b.HasOne("CodeShellCore.Moldster.Tenant", "Tenant")
                        .WithMany("CustomTexts")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("FK_CustomTexts_Tenants")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CodeShellCore.Moldster.NavigationPage", b =>
                {
                    b.HasOne("CodeShellCore.Moldster.NavigationGroup", "NavigationGroup")
                        .WithMany("NavigationPages")
                        .HasForeignKey("NavigationGroupId")
                        .HasConstraintName("FK_NavigationPages_NavigationGroups")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CodeShellCore.Moldster.Page", "Page")
                        .WithMany("NavigationPages")
                        .HasForeignKey("PageId")
                        .HasConstraintName("FK_NavigationPages_Pages")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CodeShellCore.Moldster.Page", b =>
                {
                    b.HasOne("CodeShellCore.Moldster.Domain", "Domain")
                        .WithMany("Pages")
                        .HasForeignKey("DomainId")
                        .HasConstraintName("FK_Pages_Domains");

                    b.HasOne("CodeShellCore.Moldster.PageCategory", "PageCategory")
                        .WithMany("Pages")
                        .HasForeignKey("PageCategoryId")
                        .HasConstraintName("FK_Pages_PageCategories");

                    b.HasOne("CodeShellCore.Moldster.ResourceAction", "ResourceAction")
                        .WithMany("Pages")
                        .HasForeignKey("ResourceActionId")
                        .HasConstraintName("FK_Pages_ResourceActions");

                    b.HasOne("CodeShellCore.Moldster.Resource", "Resource")
                        .WithMany("Pages")
                        .HasForeignKey("ResourceId")
                        .HasConstraintName("FK_Pages_Resources");

                    b.HasOne("CodeShellCore.Moldster.ResourceCollection", "SourceCollection")
                        .WithMany("Pages")
                        .HasForeignKey("SourceCollectionId")
                        .HasConstraintName("FK_Pages_DomainEntityCollections1");

                    b.HasOne("CodeShellCore.Moldster.Tenant", "Tenant")
                        .WithMany("Pages")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("FK_Pages_Tenants");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.PageCategory", b =>
                {
                    b.HasOne("CodeShellCore.Moldster.Domain", "Domain")
                        .WithMany("PageCategories")
                        .HasForeignKey("DomainId")
                        .HasConstraintName("FK_PageCategories_Domains");

                    b.HasOne("CodeShellCore.Moldster.Resource", "Resource")
                        .WithMany("PageCategories")
                        .HasForeignKey("ResourceId")
                        .HasConstraintName("FK_PageCategories_Resources");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.PageCategoryParameter", b =>
                {
                    b.HasOne("CodeShellCore.Moldster.PageCategory", "PageCategory")
                        .WithMany("PageCategoryParameters")
                        .HasForeignKey("PageCategoryId")
                        .HasConstraintName("FK_PageCategoryParameters_PageCategories")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CodeShellCore.Moldster.PageControl", b =>
                {
                    b.HasOne("CodeShellCore.Moldster.Control", "Control")
                        .WithMany("PageControls")
                        .HasForeignKey("ControlId")
                        .HasConstraintName("FK_PageControls_Controls")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CodeShellCore.Moldster.Page", "Page")
                        .WithMany("PageControls")
                        .HasForeignKey("PageId")
                        .HasConstraintName("FK_PageControls_Pages")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CodeShellCore.Moldster.ResourceCollection", "SourceCollection")
                        .WithMany("PageControls")
                        .HasForeignKey("SourceCollectionId")
                        .HasConstraintName("FK_PageControls_DomainEntityCollections");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.PageControlValidator", b =>
                {
                    b.HasOne("CodeShellCore.Moldster.PageControl", "PageControl")
                        .WithMany("PageControlValidators")
                        .HasForeignKey("PageControlId")
                        .HasConstraintName("FK_PageControlValidators_PageControls");

                    b.HasOne("CodeShellCore.Moldster.Validator", "Validator")
                        .WithMany("PageControlValidators")
                        .HasForeignKey("ValidatorId")
                        .HasConstraintName("FK_PageControlValidators_Validators");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.PageParameter", b =>
                {
                    b.HasOne("CodeShellCore.Moldster.PageCategoryParameter", "PageCategoryParameter")
                        .WithMany("PageParameters")
                        .HasForeignKey("PageCategoryParameterId")
                        .HasConstraintName("FK_PageParameters_PageCategoryParameters");

                    b.HasOne("CodeShellCore.Moldster.Page", "Page")
                        .WithMany("PageParameters")
                        .HasForeignKey("PageId")
                        .HasConstraintName("FK_PageParameters_Pages")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CodeShellCore.Moldster.PageRoute", b =>
                {
                    b.HasOne("CodeShellCore.Moldster.Page", "Page")
                        .WithMany("PageRoutes")
                        .HasForeignKey("PageId")
                        .HasConstraintName("FK_PageRoutes_Pages")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CodeShellCore.Moldster.Resource", b =>
                {
                    b.HasOne("CodeShellCore.Moldster.Domain", "Domain")
                        .WithMany("Resources")
                        .HasForeignKey("DomainId")
                        .HasConstraintName("FK_Resources_Domains");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.ResourceAction", b =>
                {
                    b.HasOne("CodeShellCore.Moldster.Resource", "Resource")
                        .WithMany("ResourceActions")
                        .HasForeignKey("ResourceId")
                        .HasConstraintName("FK_ResourceActions_Resources");

                    b.HasOne("CodeShellCore.Moldster.Tenant", "Tenant")
                        .WithMany("ResourceActions")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("FK_ResourceActions_Tenants");
                });

            modelBuilder.Entity("CodeShellCore.Moldster.ResourceCollection", b =>
                {
                    b.HasOne("CodeShellCore.Moldster.Resource", "Resource")
                        .WithMany("ResourceCollections")
                        .HasForeignKey("ResourceId")
                        .HasConstraintName("FK_ResourceCollections_Resources")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CodeShellCore.Moldster.ResourceCollectionCondition", b =>
                {
                    b.HasOne("CodeShellCore.Moldster.ResourceCollection", "DomainEntityCollection")
                        .WithMany("ResourceCollectionConditions")
                        .HasForeignKey("DomainEntityCollectionId")
                        .HasConstraintName("FK_EntityCollectionConditions_DomainEntityCollections");
                });
#pragma warning restore 612, 618
        }
    }
}
